---
description: "Chrome Debug Protocol integration for automated debugging workflows"
globs: ["**/*.ts", "**/*.tsx", "background.ts", "contents/**/*"]
alwaysApply: false
---
# Chrome Debug Protocol Integration Standards

## Automated Debugging Workflows
Leverage Chrome Debug Protocol for comprehensive debugging without manual intervention:

```typescript
// Debug session management patterns
interface DebugSession {
  tabId: string;
  sessionActive: boolean;
  breakpoints: DebugBreakpoint[];
  consoleMonitoring: boolean;
}

// Automated debugging workflow
const automatedDebugFlow = async (issue: string) => {
  // 1. Launch debug-enabled Chrome
  await launchChromeDebug();
  
  // 2. Connect to debug session
  const session = await connectToChrome();
  
  // 3. Set contextual breakpoints
  await setIntelligentBreakpoints(issue);
  
  // 4. Monitor console for errors
  await startConsoleMonitoring();
  
  // 5. Execute user scenario
  await executeTestScenario(issue);
  
  // 6. Analyze captured data
  return await analyzeDebugData();
};
```

## Intelligent Breakpoint Management
```typescript
// Context-aware breakpoint setting
const setContextualBreakpoints = async (bugContext: string) => {
  const relevantFiles = await identifyRelevantFiles(bugContext);
  
  for (const file of relevantFiles) {
    // Set breakpoints at critical points
    await setBreakpoint(file.path, file.criticalLines);
    
    // Set conditional breakpoints for specific scenarios
    await setConditionalBreakpoint(file.path, line, condition);
  }
};

// Automatic breakpoint strategies
enum BreakpointStrategy {
  ERROR_BOUNDARIES = "error_boundaries",
  STATE_CHANGES = "state_changes", 
  API_CALLS = "api_calls",
  USER_INTERACTIONS = "user_interactions",
  CHROME_API_USAGE = "chrome_api_usage"
}
```

## Console Monitoring and Analysis
```typescript
// Automated console analysis
interface ConsoleAnalysis {
  errorPatterns: string[];
  warningTrends: string[];
  performanceIssues: string[];
  extensionSpecificIssues: string[];
}

const analyzeConsoleOutput = (logs: ConsoleLog[]): ConsoleAnalysis => {
  return {
    errorPatterns: extractErrorPatterns(logs),
    warningTrends: identifyWarningTrends(logs),
    performanceIssues: detectPerformanceIssues(logs),
    extensionSpecificIssues: findExtensionIssues(logs)
  };
};

// Real-time console monitoring
const monitorConsoleForIssues = async () => {
  const session = await getActiveDebugSession();
  
  session.onConsoleLog((log) => {
    if (log.level === 'error') {
      analyzeError(log);
      suggestFix(log);
    }
  });
};
```

## Extension-Specific Debug Patterns
```typescript
// Chrome extension debugging workflows
const debugExtensionFlow = async (component: ExtensionComponent) => {
  switch (component) {
    case 'popup':
      return await debugPopupComponent();
    case 'background':
      return await debugBackgroundScript();
    case 'content':
      return await debugContentScript();
    case 'options':
      return await debugOptionsPage();
  }
};

// Background script debugging
const debugBackgroundScript = async () => {
  // Monitor service worker lifecycle
  await monitorServiceWorkerEvents();
  
  // Track message passing
  await monitorMessagePassing();
  
  // Check extension storage
  await inspectExtensionStorage();
  
  // Verify permissions usage
  await validatePermissions();
};

// Content script debugging
const debugContentScript = async () => {
  // Monitor injection timing
  await trackInjectionTiming();
  
  // Check DOM access issues
  await validateDOMAccess();
  
  // Monitor cross-origin restrictions
  await checkCORSIssues();
  
  // Verify communication with background
  await testMessagePassing();
};
```

## Performance Debugging Automation
```typescript
// Automated performance analysis
interface PerformanceMetrics {
  memoryUsage: MemoryProfile;
  executionTime: TimingProfile;
  networkActivity: NetworkProfile;
  domManipulation: DOMProfile;
}

const analyzeExtensionPerformance = async (): Promise<PerformanceMetrics> => {
  // Start performance monitoring
  await startPerformanceRecording();
  
  // Execute typical user flows
  await simulateUserInteractions();
  
  // Stop recording and analyze
  const data = await stopPerformanceRecording();
  
  return analyzePerformanceData(data);
};

// Memory leak detection
const detectMemoryLeaks = async () => {
  const baseline = await takeMemorySnapshot();
  
  // Execute operations multiple times
  for (let i = 0; i < 10; i++) {
    await executeOperationCycle();
    await forceGarbageCollection();
  }
  
  const final = await takeMemorySnapshot();
  return compareMemorySnapshots(baseline, final);
};
```

## Debug Data Analysis and Reporting
```typescript
// Automated issue analysis
interface DebugReport {
  issueType: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  affectedComponents: string[];
  rootCause: string;
  suggestedFixes: string[];
  testSteps: string[];
}

const generateDebugReport = (debugData: DebugData): DebugReport => {
  const analysis = analyzeDebugData(debugData);
  
  return {
    issueType: classifyIssue(analysis),
    severity: assessSeverity(analysis),
    affectedComponents: identifyAffectedComponents(analysis),
    rootCause: determineRootCause(analysis),
    suggestedFixes: generateFixSuggestions(analysis),
    testSteps: createTestSteps(analysis)
  };
};

// Integration with development workflow
const integrateWithWorkflow = async (report: DebugReport) => {
  // Create issue in project management
  await createIssue(report);
  
  // Generate test cases
  await generateTestCases(report);
  
  // Update documentation
  await updateTroubleshootingDocs(report);
  
  // Notify team
  await notifyTeam(report);
};
```

## Debug Protocol Best Practices
1. **Session Management**: Always clean up debug sessions
2. **Resource Monitoring**: Track memory and CPU usage during debugging
3. **Contextual Debugging**: Focus on relevant code paths based on issue description
4. **Automated Analysis**: Let AI analyze patterns rather than manual inspection
5. **Integration**: Connect debug findings to development workflow

## Error Recovery and Failsafes
```typescript
// Robust debugging with fallbacks
const robustDebugSession = async (operation: () => Promise<any>) => {
  let session;
  try {
    session = await connectToChrome();
    return await operation();
  } catch (error) {
    // Fallback to alternative debugging methods
    return await fallbackDebugging(error);
  } finally {
    if (session) {
      await cleanupDebugSession(session);
    }
  }
};

// Automatic recovery from debug failures
const handleDebugFailure = async (error: Error) => {
  if (error.message.includes('connection refused')) {
    // Restart Chrome in debug mode
    await restartChromeDebug();
    return true;
  }
  
  if (error.message.includes('timeout')) {
    // Increase timeout and retry
    await adjustTimeoutSettings();
    return true;
  }
  
  return false; // Manual intervention needed
};
```

## AI-Driven Debug Strategies
- Use pattern recognition to identify common issue types
- Automatically correlate user reports with debug data
- Generate hypothesis-driven debug plans
- Continuously learn from debug session outcomes
- Integrate with code review feedback for preventive debugging

## CDP WebSocket Message Handling (Critical Patterns)
```typescript
// CRITICAL: Proper CDP WebSocket message handling
// Issue discovered: Extension events flood the WebSocket connection
// Solution: Filter messages by command ID and handle async responses properly

const properCDPConnection = async (tabId: string) => {
  const ws = await connectToTab(tabId);
  
  // Helper function to wait for specific command responses
  const sendCommandAndWait = async (commandId: number, method: string, params?: any) => {
    const message = { id: commandId, method, params: params || {} };
    await ws.send(JSON.stringify(message));
    
    // CRITICAL: Must wait for specific command ID, not first message
    while (true) {
      const response = await ws.recv();
      const data = JSON.parse(response);
      
      // Return only our command response
      if (data.id === commandId) {
        return data;
      }
      
      // Filter out extension events (very common)
      if (data.method && data.method.includes('Runtime.executionContextCreated')) {
        continue; // Chrome extensions create many contexts
      }
      
      if (data.method && data.method.includes('Runtime.consoleAPICalled')) {
        continue; // Extension console logs
      }
    }
  };
  
  return { sendCommandAndWait, ws };
};

// IMPORTANT: DevTools interference pattern
// ISSUE: Having Chrome DevTools open on the same tab interferes with external CDP
// SOLUTION: Close DevTools before external CDP automation
const ensureCleanCDPEnvironment = async (tabId: string) => {
  // Check if DevTools is open on target tab
  const tabs = await getChromeTabs();
  const devToolsTab = tabs.find(tab => 
    tab.url.includes('devtools://') && tab.url.includes(tabId)
  );
  
  if (devToolsTab) {
    console.warn('⚠️  DevTools open on target tab - may interfere with CDP');
    // Request user to close DevTools
    return false;
  }
  
  return true;
};
```

## Test Automation via CDP (Working Patterns)
```typescript
// Pattern discovered: Running existing test frameworks via CDP
const runTestsViaCDP = async (tabId: string) => {
  const { sendCommandAndWait } = await properCDPConnection(tabId);
  
  // 1. Enable Runtime domain
  await sendCommandAndWait(1, 'Runtime.enable');
  
  // 2. Check for existing test framework
  const testFrameworkCheck = await sendCommandAndWait(2, 'Runtime.evaluate', {
    expression: 'typeof window.testRunner',
    returnByValue: true
  });
  
  if (testFrameworkCheck.result.result.value === 'object') {
    // 3. Execute test suite
    const testResults = await sendCommandAndWait(3, 'Runtime.evaluate', {
      expression: `
        (async () => {
          const results = await window.testRunner.run();
          return {
            total: results.length,
            passed: results.filter(r => r.status === 'PASS').length,
            failed: results.filter(r => r.status === 'FAIL').length
          };
        })()
      `,
      awaitPromise: true,
      returnByValue: true
    });
    
    return testResults.result.result.value;
  }
  
  return null;
};

// Custom test injection pattern
const injectAndRunCustomTests = async (tabId: string, tests: TestDefinition[]) => {
  const { sendCommandAndWait } = await properCDPConnection(tabId);
  
  // Inject test framework if needed
  await sendCommandAndWait(1, 'Runtime.evaluate', {
    expression: `
      if (!window.cdpTestRunner) {
        window.cdpTestRunner = {
          tests: [],
          run: async function() {
            const results = [];
            for (const test of this.tests) {
              try {
                await test.fn();
                results.push({name: test.name, status: 'PASS'});
              } catch(e) {
                results.push({name: test.name, status: 'FAIL', error: e.message});
              }
            }
            return results;
          }
        };
      }
    `
  });
  
  // Add tests dynamically
  for (const test of tests) {
    await sendCommandAndWait(2, 'Runtime.evaluate', {
      expression: `
        window.cdpTestRunner.tests.push({
          name: "${test.name}",
          fn: ${test.function.toString()}
        });
      `
    });
  }
  
  // Execute all tests
  return await sendCommandAndWait(3, 'Runtime.evaluate', {
    expression: 'window.cdpTestRunner.run()',
    awaitPromise: true,
    returnByValue: true
  });
};
```

## Extension Context Management
```typescript
// Handle multiple Chrome extension contexts in single tab
const manageExtensionContexts = async (tabId: string) => {
  const { ws } = await properCDPConnection(tabId);
  
  const contexts = new Map();
  
  // Listen for context creation events
  ws.onMessage((message) => {
    const data = JSON.parse(message);
    
    if (data.method === 'Runtime.executionContextCreated') {
      const context = data.params.context;
      
      if (context.origin.startsWith('chrome-extension://')) {
        contexts.set(context.id, {
          extensionId: context.origin.split('//')[1],
          name: context.name,
          type: context.auxData.type
        });
      }
    }
  });
  
  return contexts;
};

// Target specific execution context
const executeInMainContext = async (tabId: string, code: string) => {
  const { sendCommandAndWait } = await properCDPConnection(tabId);
  
  // Get available contexts
  const contextsResponse = await sendCommandAndWait(1, 'Runtime.evaluate', {
    expression: '1', // Simple expression to get context info
    returnByValue: true
  });
  
  // Execute in main page context (not extension contexts)
  return await sendCommandAndWait(2, 'Runtime.evaluate', {
    expression: code,
    contextId: undefined, // Use default context
    returnByValue: true
  });
};
```

## Debugging Best Practices - Lessons Learned

### 1. Message Flow Management
- **Always** filter WebSocket messages by command ID
- Chrome extensions create lots of execution context noise
- Use proper async/await patterns for command responses

### 2. Environment Preparation  
- Close Chrome DevTools before external CDP automation
- Refresh target page after closing DevTools
- Check for extension interference

### 3. Error Recovery Patterns
```typescript
const robustCDPExecution = async (tabId: string, operation: () => Promise<any>) => {
  try {
    // Ensure clean environment
    const isClean = await ensureCleanCDPEnvironment(tabId);
    if (!isClean) {
      throw new Error('DevTools interference detected');
    }
    
    return await operation();
    
  } catch (error) {
    if (error.message.includes('WebSocket connection')) {
      // Reconnect and retry
      await delay(1000);
      return await operation();
    }
    throw error;
  }
};
```

### 4. Test Integration Strategies
- **Prefer existing test frameworks** over custom injection
- Use `awaitPromise: true` for async test execution  
- Handle both sync and async test patterns
- Monitor console output during test execution
