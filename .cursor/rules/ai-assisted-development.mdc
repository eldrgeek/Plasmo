---
description: "AI-assisted coding patterns leveraging MCP server capabilities"
globs: ["**/*.ts", "**/*.tsx", "**/*.py"]
alwaysApply: false
---
# AI-Assisted Development Workflows v2.0

## MCP Server Knowledge Injection - CRITICAL REQUIREMENT

### ⚠️ MANDATORY: MCP Server Context Awareness
**IMPORTANT**: Every conversation using MCP tools must inject comprehensive server knowledge:

```typescript
interface MCPServerContext {
  version: "2.0.0-consolidated";
  serverFile: "mcp_server_consolidated.py";
  deprecatedFiles: [
    "mcp_server.py",
    "mcp_server_fixed.py", 
    "mcp_server_backup.py",
    "mcp_server_v1.1.1_unicode_fix.py"
  ];
  capabilities: {
    fileOperations: "secure_with_path_validation";
    codeAnalysis: "comprehensive_metrics_and_complexity";
    gitIntegration: "read_only_with_command_filtering";
    chromeDebugging: "real_time_with_robust_error_handling";
    consoleMonitoring: "persistent_websocket_connections";
    javascriptExecution: "async_with_proper_correlation";
    breakpointManagement: "intelligent_conditional_support";
    errorHandling: "comprehensive_with_structured_logging";
    resourceManagement: "automatic_cleanup_and_tracking";
    securityFeatures: "path_traversal_protection_and_input_sanitization";
    unicodeSupport: "emoji_and_special_character_safe";
    threadSafety: "connection_locking_and_synchronization";
  };
  architecture: {
    transport: "HTTP";
    async_support: true;
    websocket_management: "context_managed";
    logging: "structured_with_file_and_console";
    error_recovery: "automatic_with_fallbacks";
    resource_cleanup: "signal_handlers_and_atexit";
  };
}
```

### Knowledge Injection Requirements
When any MCP server tool is used, the AI assistant MUST be aware of:

1. **Server Architecture**: Consolidated v2.0 with unified codebase
2. **Security Model**: Path validation, input sanitization, size limits
3. **Error Handling**: Comprehensive with logging and structured responses
4. **Chrome Debugging**: WebSocket-based with proper async correlation
5. **Resource Management**: Connection tracking and automatic cleanup
6. **Performance Features**: Caching, async operations, timeout handling

## Enhanced MCP Tool Usage Patterns

### Secure File Operations Workflow
```typescript
// Always use with security awareness
async function secureFileWorkflow(issue: string) {
  // 1. Validate file access is within project boundaries
  const projectStructure = await get_project_structure(".", 3);
  
  // 2. Use enhanced search with security filtering
  const searchResults = await search_in_files(issue, ".", "*.{ts,tsx,py}", false);
  
  // 3. Read files with automatic backup and validation
  const fileContents = await Promise.all(
    searchResults.matches.map(match => read_file(match.file))
  );
  
  // 4. Analyze with comprehensive metrics
  const codeAnalysis = await Promise.all(
    searchResults.matches.map(match => analyze_code(match.file))
  );
  
  return { projectStructure, searchResults, fileContents, codeAnalysis };
}
```

### Chrome Debugging Workflow v2.0
```typescript
// Enhanced debugging with robust error handling
async function chromeDebugWorkflow(issue: string) {
  try {
    // 1. Launch Chrome with enhanced multi-platform support
    const launchResult = await launch_chrome_debug();
    if (!launchResult.success) {
      throw new Error(`Chrome launch failed: ${launchResult.error}`);
    }
    
    // 2. Connect with enhanced connection management
    const connection = await connect_to_chrome(9222, "localhost");
    if (!connection.success) {
      throw new Error(`Chrome connection failed: ${connection.error}`);
    }
    
    // 3. Get tabs with intelligent filtering
    const tabs = await get_chrome_tabs(connection.connection_id);
    const extensionTabs = tabs.tabs.filter(tab => tab.is_extension);
    
    // 4. Start real-time console monitoring
    for (const tab of extensionTabs) {
      const monitorResult = await start_console_monitoring_fixed(
        tab.id, 
        connection.connection_id
      );
      
      if (monitorResult.success) {
        console.log(`Console monitoring started for ${tab.title}`);
      }
    }
    
    // 5. Execute diagnostic JavaScript with proper error handling
    const diagnosticCode = generateDiagnosticCode(issue);
    const executionResults = await Promise.all(
      extensionTabs.map(tab => 
        execute_javascript_fixed(diagnosticCode, tab.id, connection.connection_id)
      )
    );
    
    // 6. Analyze console logs with structured filtering
    const consoleLogs = await get_console_logs(
      null, 
      connection.connection_id, 
      100
    );
    
    return {
      launch: launchResult,
      connection: connection,
      tabs: tabs,
      execution: executionResults,
      console: consoleLogs,
      analysis: analyzeDebugResults(executionResults, consoleLogs)
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message,
      suggestion: "Check Chrome launch configuration and debugging setup"
    };
  }
}
```

### Error-Aware Development Assistance
```typescript
// Always expect and handle comprehensive error responses
async function handleMCPOperation<T>(operation: () => Promise<T>): Promise<T> {
  try {
    const result = await operation();
    
    // Check for structured error responses
    if (typeof result === 'object' && result !== null && 'success' in result) {
      if (!result.success) {
        console.error(`MCP Operation Error:`, {
          operation: result.operation || 'unknown',
          error: result.error,
          errorType: result.error_type,
          timestamp: result.timestamp,
          context: result.context
        });
        
        // Provide contextual recovery suggestions
        if (result.error_type === 'FileNotFoundError') {
          console.log('Suggestion: Check file path and ensure file exists');
        } else if (result.error_type === 'PermissionError') {
          console.log('Suggestion: Check file permissions and access rights');
        } else if (result.error_type === 'UnicodeDecodeError') {
          console.log('Suggestion: File may contain binary data or invalid encoding');
        }
        
        throw new Error(`MCP operation failed: ${result.error}`);
      }
    }
    
    return result;
  } catch (error) {
    console.error('MCP operation exception:', error);
    throw error;
  }
}
```

## Context-Aware Problem Solving

### Issue Analysis with MCP Context
```typescript
interface IssueAnalysisContext {
  mcpServer: MCPServerContext;
  projectType: "plasmo_chrome_extension";
  availableTools: string[];
  securityConstraints: string[];
  debuggingCapabilities: string[];
}

async function analyzeIssueWithContext(
  issue: string, 
  context: IssueAnalysisContext
): Promise<AnalysisResult> {
  
  // 1. Understand issue scope with enhanced tools
  const projectAnalysis = await get_project_structure(".", 4);
  const codeSearch = await search_in_files(issue, ".", "*.{ts,tsx,js,jsx,py}", false);
  
  // 2. Use Chrome debugging if relevant
  let chromeAnalysis = null;
  if (issue.includes('chrome') || issue.includes('extension') || issue.includes('browser')) {
    chromeAnalysis = await chromeDebugWorkflow(issue);
  }
  
  // 3. Analyze git context safely
  const gitStatus = await run_git_command("status", ".");
  const gitLog = await run_git_command("log --oneline -10", ".");
  
  // 4. Get comprehensive system context
  const systemInfo = await get_system_info(false); // Privacy-aware
  const serverInfo = await server_info();
  
  return {
    issue: issue,
    project: projectAnalysis,
    codeMatches: codeSearch,
    chrome: chromeAnalysis,
    git: { status: gitStatus, log: gitLog },
    system: systemInfo,
    server: serverInfo,
    recommendations: generateRecommendations(issue, {
      project: projectAnalysis,
      code: codeSearch,
      chrome: chromeAnalysis
    })
  };
}
```

### Solution Implementation with MCP Integration
```typescript
async function implementSolutionWithMCP(
  solution: SolutionPlan,
  context: IssueAnalysisContext
): Promise<ImplementationResult> {
  
  const results = [];
  
  for (const step of solution.steps) {
    try {
      switch (step.type) {
        case 'file_modification':
          // Use secure file operations with backup
          const backupResult = await read_file(step.filePath);
          const writeResult = await write_file(step.filePath, step.content);
          results.push({ step, result: writeResult, backup: backupResult });
          break;
          
        case 'chrome_debugging':
          // Use enhanced Chrome debugging workflow
          const debugResult = await chromeDebugWorkflow(step.issue);
          results.push({ step, result: debugResult });
          break;
          
        case 'code_analysis':
          // Use comprehensive code analysis
          const analysisResult = await analyze_code(step.filePath);
          results.push({ step, result: analysisResult });
          break;
          
        case 'git_operation':
          // Use safe git commands only
          const gitResult = await run_git_command(step.command, ".");
          results.push({ step, result: gitResult });
          break;
      }
    } catch (error) {
      results.push({
        step,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }
  
  return {
    solution: solution,
    results: results,
    success: results.every(r => !r.error),
    timestamp: new Date().toISOString()
  };
}
```

## Knowledge Transfer and Learning

### MCP Server Capability Awareness
The AI assistant must demonstrate understanding of:

1. **Enhanced Security**: All file operations include path validation and size limits
2. **Robust Error Handling**: Every operation returns structured error responses
3. **Chrome Debug Integration**: Real-time monitoring with proper WebSocket management
4. **Resource Management**: Automatic cleanup of connections and background tasks
5. **Unicode Safety**: Proper handling of emoji and special characters in all outputs
6. **Thread Safety**: Concurrent operation support with proper synchronization

### Communication Patterns
When discussing MCP server capabilities:

```typescript
// ✅ CORRECT: Demonstrate awareness of v2.0 capabilities
"I'll use the consolidated MCP server's enhanced file operations which include 
automatic path validation and backup creation. The server's comprehensive error 
handling will provide structured responses if any issues occur."

// ❌ INCORRECT: Reference deprecated functionality
"I'll use the mcp_server.py file operations..." // Wrong - deprecated file

// ✅ CORRECT: Show understanding of Chrome debugging improvements
"The consolidated server's Chrome debugging uses persistent WebSocket connections 
with proper request/response correlation, ensuring reliable JavaScript execution 
and real-time console monitoring."

// ❌ INCORRECT: Ignore error handling improvements
"I'll execute JavaScript in the browser tab..." // Missing error handling awareness
```

### Documentation and Reporting
When documenting MCP server usage:

1. **Always mention** the consolidated v2.0 architecture
2. **Reference** specific security and error handling improvements
3. **Explain** Chrome debugging enhancements and WebSocket management
4. **Note** resource cleanup and logging capabilities
5. **Provide** recovery suggestions for common error types

## Continuous Improvement Integration

### Learning from MCP Operations
```typescript
interface MCPOperationLearning {
  operation: string;
  input: any;
  output: any;
  success: boolean;
  errorType?: string;
  performance: {
    duration: number;
    resourceUsage: string;
  };
  lessons: string[];
  improvements: string[];
}

// Analyze patterns in MCP operations for continuous improvement
function analyzeOperationPatterns(operations: MCPOperationLearning[]): AnalysisResult {
  return {
    commonErrors: extractCommonErrors(operations),
    performanceBottlenecks: identifyBottlenecks(operations),
    successPatterns: identifySuccessPatterns(operations),
    recommendations: generateImprovements(operations)
  };
}
```

This ensures that every interaction with the MCP server leverages its full v2.0 capabilities while maintaining awareness of security, error handling, and resource management improvements.
