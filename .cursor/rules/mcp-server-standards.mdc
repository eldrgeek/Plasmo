---
description: "MCP server development and integration standards"
globs: ["**/*mcp*.py", "**/*mcp*.ts", "**/*mcp*.js", "**/mcp_server.py"]
alwaysApply: false
---
# MCP Server Development Standards v2.0

## Server Consolidation and Architecture

### ⚠️ CRITICAL: Use Consolidated Server
**IMPORTANT**: The project now has a **single consolidated MCP server** that combines all improvements:

- **File to use**: `mcp_server.py` (v2.0.0)
- **Deprecated files**: `mcp_server.py`, `mcp_server_fixed.py`, `mcp_server_backup.py`, `mcp_server_v1.1.1_unicode_fix.py`
- **Benefits**: Eliminates redundancy, comprehensive error handling, enhanced security

### Version 2.0 Improvements
✅ **Unified codebase** - No more duplicate functions across multiple files  
✅ **Enhanced error handling** - Comprehensive exception management with logging  
✅ **Security validation** - Path traversal protection and input sanitization  
✅ **Resource management** - Proper WebSocket cleanup and connection tracking  
✅ **Unicode safety** - Robust handling of emoji and special characters  
✅ **Thread safety** - Protected shared resources with proper locking  
✅ **Logging integration** - Structured logging for debugging and monitoring  

## Development Workflow - CRITICAL CONSTRAINTS

### ⚠️ Server Code Changes Require Restart
**IMPORTANT**: After modifying MCP server code, the server must be restarted and reconnected before testing changes:

1. **Stop current server** (Ctrl+C or kill process)
2. **Use consolidated server**: `python3 mcp_server.py`
3. **Reconnect Cursor** (restart Cursor or wait for automatic reconnection)
4. **Test tools** only after successful restart+reconnection

### Development Testing Workflow
```bash
# 1. Use the consolidated server
python3 mcp_server.py --port 8000

# 2. Verify server is running
curl -s "http://127.0.0.1:8000" | head -5

# 3. Test tools ONLY after restart+reconnection
```

### Common Development Mistakes to Avoid
❌ **Don't**: Use deprecated server files (mcp_server.py, mcp_server_fixed.py, etc.)  
✅ **Do**: Always use `mcp_server.py`  

❌ **Don't**: Try to test tools immediately after editing server code  
✅ **Do**: Always restart server and wait for reconnection  

❌ **Don't**: Ignore resource cleanup warnings in logs  
✅ **Do**: Monitor logs for connection and resource management issues  

## Error Handling Standards v2.0

### Comprehensive Error Response Format
```python
def handle_error(operation: str, error: Exception, context: Dict = None) -> Dict[str, Any]:
    """Enhanced error response format for MCP tools."""
    error_response = {
        "success": False,
        "operation": operation,
        "error": str(error),
        "error_type": type(error).__name__,
        "timestamp": datetime.now().isoformat()
    }
    
    if context:
        error_response["context"] = make_json_safe(context)
    
    # Log error for debugging
    logger.error(f"Error in {operation}: {error}", exc_info=True)
    
    return error_response

# Enhanced decorator for safe operations
def safe_operation(operation_name: str):
    """Decorator for comprehensive error handling."""
    def decorator(func):
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except FileNotFoundError as e:
                return handle_error(operation_name, e, {"file_operation": True})
            except PermissionError as e:
                return handle_error(operation_name, e, {"permission_issue": True})
            except UnicodeDecodeError as e:
                return handle_error(operation_name, e, {"encoding_issue": True})
            except asyncio.TimeoutError as e:
                return handle_error(operation_name, e, {"timeout_issue": True})
            except Exception as e:
                return handle_error(operation_name, e, {"unexpected_error": True})
        return wrapper
    return decorator
```

## Security Best Practices v2.0

### Enhanced Security Patterns
```python
def validate_file_path(file_path: str, base_dir: str = None) -> bool:
    """Enhanced path validation with security checks."""
    try:
        requested = Path(file_path).resolve()
        base = Path(base_dir or Path.cwd()).resolve()
        
        # Check if path is within allowed directory
        if not str(requested).startswith(str(base)):
            logger.warning(f"Path traversal attempt: {file_path}")
            return False
        
        # Additional security checks
        if any(part.startswith('.') for part in requested.parts[len(base.parts):]):
            logger.warning(f"Hidden directory access attempt: {file_path}")
            return False
            
        return True
    except Exception as e:
        logger.error(f"Path validation error: {e}")
        return False

@mcp.tool()
@safe_operation("secure_file_read")
def secure_file_read(file_path: str) -> Union[str, Dict[str, Any]]:
    """Read file with comprehensive security validation."""
    if not validate_file_path(file_path):
        return {"success": False, "error": "Access denied: invalid file path"}
    
    # Additional size check
    file_path = Path(file_path)
    if file_path.stat().st_size > 50 * 1024 * 1024:  # 50MB limit
        return {"success": False, "error": "File too large for reading"}
    
    with open(file_path, 'r', encoding='utf-8') as f:
        return f.read()
```

## Chrome Debug Protocol Integration v2.0

### Enhanced Chrome Debugging Patterns
```python
# Resource management for WebSocket connections
@asynccontextmanager
async def managed_websocket(ws_url: str):
    """Context manager for safe WebSocket connections."""
    ws = None
    try:
        ws = await websockets.connect(ws_url)
        active_connections.add(ws)
        logger.info(f"WebSocket connection established: {ws_url}")
        yield ws
    except Exception as e:
        logger.error(f"WebSocket connection error: {e}")
        raise
    finally:
        if ws:
            active_connections.discard(ws)
            await ws.close()
            logger.info(f"WebSocket connection closed: {ws_url}")

# Robust command execution
async def execute_chrome_command(ws_url: str, command: str, params: Dict = None) -> Dict[str, Any]:
    """Execute Chrome Debug Protocol command with full error handling."""
    request_id = str(uuid.uuid4())[:8]
    
    try:
        async with managed_websocket(ws_url) as websocket:
            # Send command with timeout
            message = {
                "id": request_id,
                "method": command,
                "params": params or {}
            }
            
            await asyncio.wait_for(
                websocket.send(json.dumps(message)),
                timeout=5.0
            )
            
            # Wait for response with proper filtering
            start_time = time.time()
            while time.time() - start_time < 10:
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=1.0)
                    data = json.loads(response)
                    
                    if data.get("id") == request_id:
                        return {
                            "success": True,
                            "result": make_json_safe(data.get("result", {})),
                            "error": data.get("error"),
                            "timestamp": datetime.now().isoformat()
                        }
                        
                except asyncio.TimeoutError:
                    continue
            
            return {"success": False, "error": "Command timeout"}
            
    except Exception as e:
        logger.error(f"Chrome command error: {e}")
        return {"success": False, "error": str(e)}
```

## Web Rendering Standards v2.0

### FastHTML for Python Web Pages
**MANDATORY**: All Python web pages and interfaces must use FastHTML for rendering.

#### FastHTML Requirements
```python
# Required import pattern
from fasthtml.common import *

# Standard FastHTML app initialization
app, rt = fast_app(
    live=True,  # Enable live reload for development
    hdrs=[
        # Include modern CSS framework
        Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
        # Custom styles
        Style("""
            :root {
                --primary-color: #2563eb;
                --secondary-color: #64748b;
                --success-color: #059669;
                --warning-color: #d97706;
                --error-color: #dc2626;
            }
        """)
    ]
)

# Route pattern with proper typing
@rt("/")
def get():
    return Title("App Name"), Main(
        H1("Welcome"),
        P("FastHTML-powered interface"),
        cls="container"
    )

# Component pattern for reusable elements
def StatusCard(title: str, status: str, color: str = "primary"):
    return Div(
        H3(title),
        P(status, cls=f"text-{color}"),
        cls="card"
    )
```

#### FastHTML Best Practices
- **Use semantic HTML**: Leverage FastHTML's HTML element functions
- **Component-based design**: Create reusable components for common UI patterns
- **CSS integration**: Use modern CSS frameworks (Pico CSS recommended)
- **Live reload**: Enable live reload for development efficiency
- **Type safety**: Use proper type hints for route functions and components

#### Migration from Traditional Templates
```python
# ❌ OLD: Traditional Flask/Django templates
@app.route('/')
def index():
    return render_template('index.html', data=data)

# ✅ NEW: FastHTML components
@rt("/")
def get():
    return Title("Dashboard"), Main(
        Header(H1("System Dashboard")),
        Section(
            *[StatusCard(name, status) for name, status in services.items()]
        ),
        cls="container"
    )
```

## Tool Categories and Organization v2.0

### Enhanced Tool Structure
```python
# Core File Operations (with security)
- `read_file`: Secure file reading with path validation
- `write_file`: Atomic file writing with backup creation
- `list_files`: Directory listing with security filtering
- `search_in_files`: Content search with regex support and size limits

# Development Tools (enhanced)
- `analyze_code`: Comprehensive code metrics and complexity analysis
- `get_project_structure`: Intelligent project tree with ignore patterns
- `run_git_command`: Secure git operations with command filtering

# Web Development (FastHTML)
- `create_fasthtml_app`: Generate FastHTML application structure
- `render_dashboard`: Create dashboard interfaces with FastHTML
- `generate_components`: Build reusable FastHTML components
- `integrate_css_framework`: Add modern CSS frameworks to FastHTML apps

# Chrome Extension Debugging (v2.0)
- `connect_to_chrome`: Enhanced connection management with validation
- `launch_chrome_debug`: Multi-platform Chrome launching with fallbacks
- `execute_javascript_fixed`: Robust JS execution with proper async handling
- `get_chrome_tabs`: Intelligent tab filtering with extension detection
- `start_console_monitoring_fixed`: Real-time console monitoring
- `get_console_logs`: Enhanced log retrieval with filtering
- `clear_console_logs`: Safe log cleanup
- `set_breakpoint_fixed`: Intelligent breakpoint management

# System Operations (enhanced)
- `get_system_info`: Comprehensive system analysis with privacy controls
- `server_info`: Detailed server status and capabilities
- `create_sqlite_db`: Secure database creation with validation
- `query_sqlite_db`: Safe query execution with injection protection
```

## Performance and Monitoring v2.0

### Logging and Monitoring Standards
```python
# Structured logging configuration
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('mcp_server.log'),
        logging.StreamHandler()
    ]
)

# Performance monitoring
@mcp.tool()
def get_server_metrics() -> Dict[str, Any]:
    """Get comprehensive server performance metrics."""
    return {
        "active_connections": len(active_connections),
        "background_tasks": len(background_tasks),
        "chrome_instances": len(chrome_instances),
        "console_listeners": len(console_log_listeners),
        "total_console_logs": len(console_logs),
        "memory_usage": get_memory_usage(),
        "uptime": get_server_uptime(),
        "timestamp": datetime.now().isoformat()
    }
```

## Migration Guide

### From Legacy Servers to Consolidated v2.0
1. **Stop all existing MCP servers**
2. **Update Cursor configuration** to use `mcp_server.py`
3. **Test all tools** to ensure functionality
4. **Monitor logs** for any migration issues
5. **Remove legacy server files** after successful validation

### Configuration Updates
```json
{
  "mcpServers": {
    "plasmo-dev-assistant-v2": {
      "transport": {
        "type": "http",
        "url": "http://127.0.0.1:8000"
      },
      "description": "Consolidated MCP server v2.0 with enhanced Chrome debugging",
      "capabilities": [
        "secure_file_operations",
        "enhanced_code_analysis", 
        "safe_git_integration",
        "robust_chrome_debugging",
        "real_time_console_monitoring",
        "intelligent_error_handling"
      ]
    }
  }
}
```

## Knowledge Injection Requirements

### MCP Server Context Awareness
When using the MCP server in any conversation, the AI assistant must be aware of:

1. **Current server version**: v2.0.0 Consolidated Edition
2. **Available tools and capabilities**: Full tool list with enhanced features
3. **Error handling patterns**: Comprehensive error responses with logging
4. **Security constraints**: Path validation and input sanitization
5. **Chrome debugging capabilities**: Real-time monitoring and robust execution
6. **Resource management**: Connection tracking and cleanup procedures
7. **Web rendering standard**: FastHTML for all Python web interfaces

### Context Injection Pattern
```typescript
// Include in every MCP-related conversation:
interface MCPServerContext {
  version: "2.0.0";
  serverFile: "mcp_server.py";
  capabilities: string[];
  securityFeatures: string[];
  chromeDebugging: boolean;
  resourceManagement: boolean;
  errorHandling: "comprehensive";
  unicode_support: boolean;
  webRenderingStandard: "FastHTML";
}
```

This ensures that any conversation using the MCP server has full context about its capabilities, limitations, and proper usage patterns.
