#!/bin/bash

# generate_llm_context.sh - Generate LLM-ready repository context file
# Creates a comprehensive text file containing repository contents for AI assistance

set -e

# Configuration
OUTPUT_FILE="plasmo_repository_context.txt"
REPO_URL="https://github.com/eldrgeek/Plasmo.git"
LOCAL_PATH="/Users/MikeWolf/Projects/Plasmo"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}🚀 Generating LLM context file for Plasmo repository...${NC}"

# Remove existing output file
rm -f "$OUTPUT_FILE"

# Function to add a section header
add_section() {
    echo -e "\n\n=================================================================================" >> "$OUTPUT_FILE"
    echo "= $1" >> "$OUTPUT_FILE"
    echo "=================================================================================" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
}

# Function to add a file with header
add_file() {
    local filepath="$1"
    local description="$2"
    
    if [[ -f "$filepath" ]]; then
        echo -e "\n### File: $filepath" >> "$OUTPUT_FILE"
        if [[ -n "$description" ]]; then
            echo "### Description: $description" >> "$OUTPUT_FILE"
        fi
        echo "### Lines: $(wc -l < "$filepath")" >> "$OUTPUT_FILE"
        echo "### Size: $(du -h "$filepath" | cut -f1)" >> "$OUTPUT_FILE"
        echo "" >> "$OUTPUT_FILE"
        echo '```'"$(get_file_extension "$filepath")" >> "$OUTPUT_FILE"
        cat "$filepath" >> "$OUTPUT_FILE"
        echo "" >> "$OUTPUT_FILE"
        echo '```' >> "$OUTPUT_FILE"
        echo "" >> "$OUTPUT_FILE"
    else
        echo -e "${YELLOW}⚠️  File not found: $filepath${NC}"
    fi
}

# Function to get file extension for syntax highlighting
get_file_extension() {
    local filename="$1"
    case "$filename" in
        *.ts) echo "typescript" ;;
        *.tsx) echo "tsx" ;;
        *.js) echo "javascript" ;;
        *.jsx) echo "jsx" ;;
        *.py) echo "python" ;;
        *.json) echo "json" ;;
        *.md) echo "markdown" ;;
        *.sh) echo "bash" ;;
        *.css) echo "css" ;;
        *.html) echo "html" ;;
        *.yaml|*.yml) echo "yaml" ;;
        *.mdc) echo "markdown" ;;
        *) echo "text" ;;
    esac
}

# Create header
cat > "$OUTPUT_FILE" << EOF
/**
 * PLASMO CHROME EXTENSION REPOSITORY CONTEXT
 * 
 * This file contains the complete source code and documentation for the Plasmo
 * Chrome Extension project with integrated MCP (Model Context Protocol) server.
 * 
 * Repository Information:
 * - GitHub URL: $REPO_URL
 * - Local Path: $LOCAL_PATH
 * - Generated: $(date)
 * - Generated by: generate_llm_context.sh
 * 
 * Project Description:
 * This is a Plasmo browser extension project with an integrated MCP server for 
 * Chrome Debug Protocol integration. The MCP server enables real-time debugging 
 * and monitoring of the extension through AI assistance.
 * 
 * Key Technologies:
 * - Plasmo: Browser extension framework
 * - TypeScript/React: Extension UI and logic  
 * - Python FastMCP: MCP server for Chrome debugging
 * - Chrome Debug Protocol: Browser automation and debugging
 * - WebSocket: Real-time communication with browser
 * 
 * Structure:
 * 1. Cursor Rules (Development Guidelines)
 * 2. Core Extension Files
 * 3. MCP Server Implementation
 * 4. Configuration Files
 * 5. Documentation
 * 6. Supporting Scripts
 */
EOF

# Add Cursor Rules
add_section "CURSOR RULES - DEVELOPMENT GUIDELINES"

echo "Adding cursor rules..."
add_file ".cursorrules" "Main cursor rules file"

# Add all cursor rule files
for rule_file in .cursor/rules/*.mdc; do
    if [[ -f "$rule_file" ]]; then
        filename=$(basename "$rule_file")
        add_file "$rule_file" "Cursor rule: ${filename%.mdc}"
    fi
done

# Add Core Extension Files
add_section "CORE EXTENSION FILES"

echo "Adding core extension files..."
add_file "package.json" "NPM package configuration"
add_file "tsconfig.json" "TypeScript configuration"
add_file "popup.tsx" "Extension popup interface"
add_file "background.ts" "Extension background script"
add_file "options.tsx" "Extension options page"

# Add content scripts
if [[ -d "contents" ]]; then
    for content_file in contents/*; do
        if [[ -f "$content_file" ]]; then
            add_file "$content_file" "Content script"
        fi
    done
fi

# Add styles
add_file "style.css" "Main stylesheet"
add_file "options.css" "Options page stylesheet"

# Add MCP Server Implementation
add_section "MCP SERVER IMPLEMENTATION"

echo "Adding MCP server files..."
add_file "mcp_server.py" "Consolidated MCP server implementation v2.0"
add_file "chrome_debug_fixes.py" "Chrome debugging utilities"
add_file "mcp_version_tools.py" "MCP version management tools"
add_file "requirements.txt" "Python dependencies"

# Add Configuration Files
add_section "CONFIGURATION FILES"

echo "Adding configuration files..."
add_file "claude_desktop_config.json" "Claude Desktop MCP configuration"
add_file ".gitignore" "Git ignore rules"

# Add Shell Scripts
add_section "SHELL SCRIPTS AND AUTOMATION"

echo "Adding shell scripts..."
add_file "launch-chrome-debug.sh" "Chrome debug launcher"
add_file "start_mcp.sh" "MCP server startup script"
add_file "start_mcp_stdio.sh" "MCP server STDIO mode"
add_file "setup_mcp.sh" "MCP setup script"

# Add Documentation
add_section "DOCUMENTATION"

echo "Adding documentation files..."
add_file "README.md" "Main project documentation"
add_file "MCP_README.md" "MCP server documentation"
add_file "CHROME_DEBUG_README.md" "Chrome debugging guide"
add_file "AUTO_RELOAD_README.md" "Auto-reload functionality guide"
add_file "CLAUDE_DESKTOP_README.md" "Claude Desktop setup guide"
add_file "SETUP_COMPLETE.md" "Setup completion guide"
add_file "CURSOR_FIX_INSTRUCTIONS.md" "Cursor fix instructions"
add_file "CHROME_DEBUG_SOLUTION.md" "Chrome debug solutions"
add_file "AGENTS.md" "AI agents documentation"

# Add Test Files
add_section "TEST FILES"

echo "Adding test files..."
add_file "test_dual_mode.py" "MCP dual mode testing"

# Add Assets Information
add_section "ASSETS AND BUILD INFORMATION"

echo "### Assets Directory Structure" >> "$OUTPUT_FILE"
if [[ -d "assets" ]]; then
    echo '```' >> "$OUTPUT_FILE"
    find assets -type f -name "*.png" -o -name "*.svg" -o -name "*.ico" | head -20 >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
else
    echo "No assets directory found" >> "$OUTPUT_FILE"
fi

echo "" >> "$OUTPUT_FILE"
echo "### Package.json Dependencies" >> "$OUTPUT_FILE"
if [[ -f "package.json" ]]; then
    echo '```json' >> "$OUTPUT_FILE"
    jq '.dependencies // {}, .devDependencies // {}' package.json 2>/dev/null >> "$OUTPUT_FILE" || echo "Could not parse package.json dependencies" >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
fi

# Add Git Information
add_section "GIT REPOSITORY INFORMATION"

echo "### Git Status" >> "$OUTPUT_FILE"
echo '```' >> "$OUTPUT_FILE"
git status --porcelain 2>/dev/null >> "$OUTPUT_FILE" || echo "Could not get git status" >> "$OUTPUT_FILE"
echo '```' >> "$OUTPUT_FILE"

echo "" >> "$OUTPUT_FILE"
echo "### Recent Commits" >> "$OUTPUT_FILE"
echo '```' >> "$OUTPUT_FILE"
git log --oneline -10 2>/dev/null >> "$OUTPUT_FILE" || echo "Could not get git log" >> "$OUTPUT_FILE"
echo '```' >> "$OUTPUT_FILE"

echo "" >> "$OUTPUT_FILE"
echo "### Git Remote" >> "$OUTPUT_FILE"
echo '```' >> "$OUTPUT_FILE"
git remote -v 2>/dev/null >> "$OUTPUT_FILE" || echo "Could not get git remotes" >> "$OUTPUT_FILE"
echo '```' >> "$OUTPUT_FILE"

# Final footer
echo -e "\n\n=================================================================================" >> "$OUTPUT_FILE"
echo "= END OF REPOSITORY CONTEXT" >> "$OUTPUT_FILE"
echo "=================================================================================" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"
echo "Generated on: $(date)" >> "$OUTPUT_FILE"
echo "Total files processed: $(grep -c "^### File:" "$OUTPUT_FILE")" >> "$OUTPUT_FILE"
echo "Repository size: $(du -sh . | cut -f1)" >> "$OUTPUT_FILE"

# Calculate file stats
FILE_SIZE=$(du -h "$OUTPUT_FILE" | cut -f1)
LINE_COUNT=$(wc -l < "$OUTPUT_FILE")

echo -e "${GREEN}✅ Successfully generated LLM context file!${NC}"
echo -e "${YELLOW}📁 Output file: $OUTPUT_FILE${NC}"
echo -e "${YELLOW}📊 File size: $FILE_SIZE${NC}"
echo -e "${YELLOW}📝 Total lines: $LINE_COUNT${NC}"
echo ""
echo -e "${GREEN}🤖 This file is ready to upload to an LLM for comprehensive project analysis!${NC}"
echo ""
echo -e "${GREEN}🔗 Click to open file: file://$PWD/$OUTPUT_FILE${NC}" 